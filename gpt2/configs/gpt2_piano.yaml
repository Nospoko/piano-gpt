defaults:
  - model: gpt2 # "gpt2_minimal", "gpt2_medium", "gpt2_large", "gpt2_xl"
  - data: default
  - tokenizer: exponential
  - dataset: augmented
  - logging: subsequence
  - lr: finetuning
  - optimizer: default
  - tasks:
  - _self_

out_dir: 'checkpoints'
eval_interval: 100

eval_iters: 100
eval_only: false  # if True, script exits right after the first eval
always_save_checkpoint: false  # if True, always save a checkpoint after each eval
init_from: 'scratch'  # 'scratch' or 'midi-gpt2*'

task: multi
tasks:
  - "above_median_prediction"  # Pitch tasks
  - "below_median_prediction"
  - "above_low_quartile_prediction"
  - "above_high_quartile_prediction"
  - "below_low_quartile_prediction"
  - "below_high_quartile_prediction"
  - "middle_quartiles_prediction"
  - "extreme_quartiles_prediction"
  - "loud_prediction"  # Velocity tasks
  - "very_soft_prediction"
  - "very_loud_prediction"
  - "soft_prediction"
  - "moderate_velocity_prediction"
  - "extreme_velocity_prediction"
  - "velocity_denoising"  # Denoising tasks
  - "pitch_denoising"
  - "start_time_denoising"
  - "time_denoising"
  - "comprehensive_denoising"

loss_masking: finetuning

ddp:
  backend: 'nccl'  # 'nccl', 'gloo', etc.

system:
  device: 'cuda'  # examples: 'cpu', 'cuda', 'cuda:0', 'cuda:1' etc., or try 'mps' on macbooks
  dtype: 'float16'  # 'float32', 'bfloat16', or 'float16', the latter will auto implement a GradScaler
  compile: true  # use PyTorch 2.0 to compile the model to be faster
  data_workers: 32
